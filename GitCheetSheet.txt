#) Check Your git Version -> To check git version ,you can run the following comand:
   git --version
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Repository :- A Repository is a collection of files and directories that are stored together. It is a way to store and  manage your code . It just like a normal folder.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Your config settings :- Github has a lot of settings that you can change. You can change your username, email, and other settings. Whenever you checkpoint your changes, git 
will add some information about your such as your username and email to the commit.

config file that stores all the settings that you have changed. You can make settings like what editor you would like to use etc. There are some global settings and some 
repository specific settings.

Let’s setup your email and username in this config file.-

Command for configration your setup for login into git-

git config --global user.email "your-email@example.com"
git config --global user.name "Your Name"


Now you can check your config settings:----
git config --list

This will show you all the settings that you have changed.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Creating a repository : - Creating a repository is a process of creating a new folder on your system and initializing it as a git repository. It’s just regular folder to 
     code your project, you are just asking git to track it. To create a repository, you can use the following command:

Command: - 
git status
git init

*) git status :-  command will show you the current state of your repository.
*) git init :- command will create a new folder on your system and initialize it as a git repository. This adds a hidden .git folder to your project.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Commit :- commit is a way to save your changes to your repository. It is a way to record your changes and make them permanent. You can think of a commit as a snapshot of 
   your code at a particular point in time. When you commit your changes, you are telling git to save them in a permanent way. This way, you can always go back to that point in 
   time and see what you changed.

Flow like:-     Write -->Add -->Commit 


#) Complete git flow :-- When you want to track a new folder, you first use init command to create a new repository. Then you can use add command to add the folder to the 
repository. After that you can use commit command to save the changes. Finally you can use push command to push the changes to github. Of course there is more to it but this is 
the basic flow.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Stage :- Stage is a way to tell git to track a particular file or folder. Following command for use :
   
                 >>git init
                 >>git add <file> <file2>
                 >>git status

Here we are initializing the repository and adding a file to the repository. Then we can see that the file is now being tracked by git. Currently our files are in staging area, 
this means that we have not yet committed the changes but are ready to be committed.


#) Commit :-  Here we are committing the changes to the repository. We can see that the changes are now committed to the repository. The -m flag is used to add a message to the 
commit.


>>git commit -m "commit message"
>>git status

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Logs :- This command will show you the history of your repository.It will show you all the commits that were made to the repository.
You can use the --oneline flag to show only the commit message. This will make the output more compact and easier to read.
command : - 
>>git log
>> git log --oneline


Atomic commits are a way to make sure that each commit is a self-contained unit of work. This means that if one commit fails, you can always go back to a previous commit and 
fix the issue. This is important for maintaining a clean and organized history in your repository.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) change default code editor : - You can change the default code editor in your system to vscode. To do this, you can use the following command:
>> git config --global core.editor "code --wait"
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) gitignore ::-  Gitignore is a file that tells git which files and folders to ignore. It is a way to prevent git from tracking certain files or folders. You can create a 
gitignore file and add list of files and folders to ignore by using the following command:

Example: 
node_modules
.env
.vscode
Now, when you run the git status command, it will not show the node_modules and .vscode folders as being tracked by git.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTES :- Sometime we create a empty folder and this empty folder is by default  not track by git but we want to track it also  so we have to create a '.gitkeep' file
        inside a empty folder.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Branches in git :- Branches are a way to work on different versions of a project at the same time. They allow you to create a separate line of development that can be 
worked on independently of the main branch. This can be useful when you want to make changes to a project without affecting the main branch or when you want to work on a new 
feature or bug fix.
Some developers can work on Header, some can work on Footer, some can work on Content, and some can work on Layout. This is a good example of how branches can be used in git.

HEAD in git: -The HEAD is a pointer to the current branch that you are working on. It points to the latest commit in the current branch. When you create a new branch, it is automatically set as the HEAD of that branch.
the default branch used to be master, but it is now called main. There is nothing special about main, it is just a convention.

>>git branch
>>git branch bug-fix
>>git switch bug-fix
>>git log
>>git switch master
>>git switch -c dark-mode
>>git checkout orange-mode

git branch - This command lists all the branches in the current repository.
git branch bug-fix - This command creates a new branch called bug-fix.
git switch bug-fix - This command switches to the bug-fix branch.
git log - This command shows the commit history for the current branch.
git switch master - This command switches to the master branch.
git switch -c dark-mode - This command creates a new branch called dark-mode. the -c flag is used to create a new branch.
git checkout orange-mode - This command switches to the orange-mode branch.
Commit before switching to a branch
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Merging branches ::- 

Fast-forward merge :-  This one is easy as branch that you are trying to merge is usually ahead and there are no conflicts.

When you are done working on a branch, you can merge it back into the main branch. This is done using the following command:
>>git checkout main
>>git merge bug-fix

git checkout main - This command switches to the main branch.
git merge bug-fix - This command merges the bug-fix branch into the main branch.

This is a fast-forward merge. It means that the commits in the bug-fix branch are directly merged into the main branch. This can be useful when you want to merge a branch that has already been pushed to the remote repository.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Not fast-forward merge :-  In this type of merge, the master branch also worked and have some commits that are not in the bug-fix branch. This is a not fast-forward merge.

When you are done working on a branch, you can merge it back into the main branch. This is done using the following command:
>>git checkout main
>>git merge bug-fix

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#) Managing conflicts :-  There is no magic button to resolve conflicts. You have to manually resolve the conflicts. Decide, what to keep and what to discard. VSCode has a built-in merge tool that can help you resolve the conflicts. I personally use VSCode merge tool. Github also has a merge tool that can help you resolve the conflicts but most of the time I handle them in VSCode and it gives me all the options to resolve the conflicts.

Overall it sounds scary to beginners but it is not, it’s all about communication and understanding the code situation with your team members.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Rename a branch :- You can rename a branch using the following command:
>> git branch -m <old-branch-name> <new-branch-name>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Delete a branch :- You can delete a branch using the following command:
>> git branch -d <branch-name>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Checkout a branch  :- You can checkout a branch using the following command:
>> git checkout <branch-name>

Checkout a branch means that you are going to work on that branch. You can checkout any branch you want.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) List all branches :- List all branches means that you are going to see all the branches in your repository.
   You can list all branches using the following command:
>> git branch
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

